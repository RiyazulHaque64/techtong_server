generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  name                String
  email               String?    @unique
  password            String
  contact_number      String     @unique
  profile_pic         String?
  status              UserStatus @default(ACTIVE)
  role                UserRole   @default(USER)
  is_deleted          Boolean    @default(false)
  password_changed_at DateTime   @default(now())
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  cart                Cart?
  orders              Order[]
  cards               Card[]
  reviews             Review[]

  address Address[]
  images  Image[]

  @@map("users")
}

model Product {
  id                     String      @id @default(uuid())
  name                   String      @unique
  slug                   String      @unique
  model                  String
  brand_id               String?
  tags                   String[]    @default([])
  code                   String?     @unique
  stock                  Int         @default(0)
  price                  Int
  discount_price         Int?
  retailer_price         Int?
  thumbnail              String?
  images                 String[]    @default([])
  published              Boolean     @default(true)
  featured               Boolean     @default(false)
  description            String? //html
  specification          Json?
  additional_information String? //html
  key_features           String[]    @default([])
  video_url              String?
  is_deleted             Boolean     @default(false)
  created_at             DateTime    @default(now())
  updated_at             DateTime    @updatedAt
  orderItems             OrderItem[]
  reviews                Review[]

  brand      Brand?             @relation(fields: [brand_id], references: [id])
  categories Category[]         @relation("ProductCategories")
  attributes ProductAttribute[]

  @@map("products")
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  icon        String?
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  products    Product[]

  @@map("brands")
}

model Category {
  id          String   @id @default(uuid())
  title       String   @unique
  slug        String   @unique
  icon        String?
  description String?
  parent_id   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  parent     Category?   @relation("CategoryToParent", fields: [parent_id], references: [id])
  children   Category[]  @relation("CategoryToParent")
  products   Product[]   @relation("ProductCategories")
  attributes Attribute[]

  @@map("categories")
}

model Cart {
  id         String     @id @default(uuid())
  user_id    String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  cart_items CartItem[]

  user User @relation(fields: [user_id], references: [id])

  @@map("carts")
}

model CartItem {
  id         String @id @default(uuid())
  cart_id    String
  product_id String
  quantity   Int    @default(1)
  price      Int
  cart       Cart   @relation(fields: [cart_id], references: [id])

  @@unique([cart_id, product_id], name: "cart_id_product_id")
  @@map("cart_items")
}

model Order {
  id               String         @id @default(uuid())
  user_id          String?
  customer_info_id String
  payment_method   PaymentMethod  @default(CASH_ON_DELIVERY)
  delivery_method  DeliveryMethod @default(HOME_DELIVERY)
  order_status     OrderStatus    @default(PENDING)
  payment_status   PaymentStatus  @default(DUE)
  delivery_charge  Int
  discount_amount  Int            @default(0)
  sub_amount       Int
  total_amount     Int
  payable_amount   Int
  coupon_id        String?
  comment          String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  user          User?        @relation(fields: [user_id], references: [id])
  coupon        Coupon?      @relation(fields: [coupon_id], references: [id])
  customer_info CustomerInfo @relation(fields: [customer_info_id], references: [id])
  order_items   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int    @default(1)
  price      Int

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(uuid())
  user_id    String
  product_id String
  rating     Float    @default(5)
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("reviews")
}

model Coupon {
  id                 String          @id @default(uuid())
  code               String          @unique
  discount_type      DiscountType    @default(AMOUNT)
  discount_value     Float
  maximum_value      Float?
  start_date         DateTime        @default(now())
  expiration_date    DateTime
  usage_limit        Int?
  per_user_limit     Int?
  min_order_amount   Float?
  min_product_amount Int?
  is_active          Boolean         @default(true)
  used_count         Int             @default(0)
  beneficiary_type   BeneficiaryType @default(ALL)
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  order              Order[]
  customerInfo       CustomerInfo[]
}

model Address {
  id             String  @id @default(uuid())
  user_id        String
  address        String
  email          String?
  contact_number String
  city           String

  user User @relation(fields: [user_id], references: [id])

  @@map("addresses")
}

model CustomerInfo {
  id             String  @id @default(uuid())
  name           String
  address        String
  contact_number String  @unique
  email          String?
  city           String
  coupon_id      String?
  order          Order[]

  coupon Coupon? @relation(fields: [coupon_id], references: [id])

  @@map("customers_info")
}

model Card {
  id          String @id @default(uuid())
  user_id     String
  card_number String
  exp_date    String
  cvc         String

  user User @relation(fields: [user_id], references: [id])

  @@map("cards")
}

model Image {
  id          String   @id @default(uuid())
  user_id     String?
  name        String
  alt_text    String
  type        String
  size        Int
  width       Int
  height      Int
  path        String
  bucket_id   String
  bucket_name String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  uploaded_by User? @relation(fields: [user_id], references: [id])

  @@map("images")
}

model UserOTP {
  id             String   @id @default(uuid())
  name           String
  email          String?
  contact_number String
  otp            Int      @unique
  expires_at     String
  created_at     DateTime @default(now())

  @@map("user_otp")
}

model Attribute {
  id          String   @id @default(uuid())
  category_id String?
  name        String
  value       String[] @default([])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category Category? @relation(fields: [category_id], references: [id])

  @@map("attributes")
}

model ProductAttribute {
  id         String   @id @default(uuid())
  title      String
  value      String[]
  product_id String

  product Product @relation(fields: [product_id], references: [id])

  @@map("product_attributes")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  RETAILER
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  ONLINE_PAYMENT
}

enum DeliveryMethod {
  STORE_PICKUP
  HOME_DELIVERY
}

enum PaymentStatus {
  DUE
  PAID
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

enum BeneficiaryType {
  NEW_USER
  EXISTING_USER
  ALL
}
